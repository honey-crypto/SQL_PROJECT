-- Q1: who is the  senior most  employees based on job title?
--select * from employee
--order by levels desc
--limit 1
--Q2: which countries have the most invoice?
--select count (*) as c ,billing_country
--from invoice
--group by billing_country
--order by c desc
--Q3: what are top 3 values of total invoice
--select * from invoice
--select total, customer_id,billing_country
--from invoice
--order by total desc
--limit 3
--Q4: maximum invoice total in a city for music festival organization
--select * from invoice 
/*select sum (total) as invoice_total ,billing_city
from invoice
group by billing_city
order by invoice_total desc
Q5: who is the best customer? customer who spent tje most money
--select * from invoice
select customer.customer_id,customer.first_name,customer.last_name,sum(total) as invoice_total
from customer
join invoice on customer.customer_id= invoice.customer_id
group by customer.customer_id
order by invoice_total desc
MODERATE LEVEL
Q1: write a query to return  the email, first_name, last_name&genre of all rock music listeners. 
return your list ordered alphetically by email starting with A.
--select * from track
SELECT DISTINCT email, first_name, last_name
FROM customer
JOIN invoice ON customer.customer_id=invoice.customer_id
JOIN invoice_line ON invoice.invoice_id=invoice_line.invoice_id
WHERE track_id IN(
  SELECT track_id FROM track
  JOIN genre ON track.genre_id= genre.genre_id
  WHERE genre.name LIKE 'rock'
)
ORDER BY email
Q2: lets invite the  artist who have written the most rock music  in our dataset.
waq that returns the artist name and total track .
--select * from  track
select artist.artist_id, artist.name,count(artist.artist_id) as number_of_songs
from track
join album on album.album_id = track. album_id
join artist on artist.artist_id =album.artist_id
join genre on genre.genre_id= track.genre_id
where genre.name like 'rock'
group by artist.artist_id
order by number_of_songs desc
limit 10;
Q3: return all the track name that have a song length longer than the average song length.
return the name and milliseconds for the each track . order by the song length with the longest songs listed first
--select * from track
select  name,milliseconds
from track
where milliseconds>(
select avg(milliseconds)as avg_track_length
from track)
order by milliseconds desc
ADVANCE LEVEL
Q1: Find how  much amount spent by each customer on artists? 
waq to return customer name, artist name and total spent
with  best_selling_artist as (
select artist.artist_id, artist.name,
sum(invoice_line.unit_price * invoice_line.quantity) as total_sale
from invoice_line
join track on track.track_id= invoice_line.track_id
join album on album.album_id= track.album_id
join artist on artist.artist_id= album.artist_id
group by 1
order by 3 desc
limit 1
)
select c.customer_id,c.first_name,c.last_name,bsa.name,
sum(invoice_line.unit_price * invoice_line.quantity) as amount_spend
from invoice i
join customer c on c.customer_id = i.customer_id
join invoice_line on invoice_line.invoice_id = i.invoice_id
join track t on t.track_id= invoice_line.track_id
join album alb on alb.album_id = t.album_id
join best_selling_artist bsa on bsa.artist_id = alb.artist_id
group by 1,2,3,4
order by 5 desc;
Q2:	We want to find out the most popular music Genre for each country. 
We determine the most popular genre as the genre with the highest amount of purchases. 
Waq that returns each country along with the top Genre. 
For countries where the maximum number of purchases is shared return all Genres*/
with popular_genre as
(SELECT
  COUNT(invoice_line.quantity) as purchases,
  customer.country,
  genre.name,
  genre.genre_id,
  ROW_NUMBER() OVER (PARTITION BY customer.country ORDER BY COUNT(invoice_line.quantity) DESC) as rowno
FROM invoice_line
JOIN invoice ON invoice.invoice_id = invoice_line.invoice_id
JOIN customer ON customer.customer_id = invoice.customer_id
JOIN track ON track.track_id = invoice_line.track_id
JOIN genre ON genre.genre_id = track.genre_id
GROUP BY customer.country, genre.name, genre.genre_id
ORDER BY customer.country ASC, purchases DESC
)
select *  from popular_genre where rowno <=1
